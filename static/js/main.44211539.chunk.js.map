{"version":3,"sources":["basic.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["printNumbersTill","n","res","i","printValues","array","forEach","value","luxNumsSplit","e","a","split","map","Number","filter","st","push","slice","shift","console","log","k","Image","data","size","urls","src","alt","alt_description","Carusel","useState","current","setCurrent","d","key","id","onClick","className","Luxor","luxNums","setLuxNums","React","pasted","setPasted","26","selected","setSelected","length","sec","col","style","float","l","join","prev","name","cols","rows","placeholder","onPaste","onChange","target","flexBasis","App","activeTab","setActiveTab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.44211539.chunk.js","sourcesContent":["function printNumbersTill (n) {\n\tlet res = ''\n\tfor (let i = 0; i < n; i++) {\n\t\tres += ' ' + (i + 1)\n\t}\n\treturn res\n}\n\nfunction getGreetingTo (name) {\n\treturn `Hello ${name}`\n}\n\nfunction printValues (array) {\n\tlet res = ''\n\tarray.forEach(value => {\n\t\tres += ' ' + value\n\t})\n\treturn res\n}\n\nexport { printNumbersTill, getGreetingTo, printValues }","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction useUnsplash ({ ids }) {\n\tconst [data, setData] = useState([])\n\tuseEffect(() => {\n\t\tlet cancel = false\n\t\tasync function fetchData () {\n\t\t\tconst result = await Promise.all(ids.map(async id => {\n\t\t\t\tconst res = await axios(\n\t\t\t\t\t`https://api.unsplash.com/photos/${id}`,\n\t\t\t\t\t{ headers: { Authorization: 'Client-ID J162oUYuwAtO_PUiYAUH1mqNDUaCaI6o5e9yw9s81eA' } })\n\t\t\t\tconsole.log( res.data )\n\t\t\t\treturn res.data\n\t\t\t}))\n\n\t\t\t// console.log(result.data)\n\t\t\tif (!cancel) {\n\t\t\t\tsetData(result)\n\t\t\t}\n\t\t}\n\t\tfetchData()\n\t\treturn () => { cancel = true }\n\t}, [ids])\n\n\treturn data\n}\n\nfunction luxNumsSplit(e) {\n\tlet a = e.split(/\\n\\n/).map(a=>a.split(/\\n/).map(Number).filter(a=>a) ).filter(a => a[0] !== 0)\n\tlet st= []\n\tif (a[0][4]) {\n\t\tfor (let i=0; a[0][i*4]; i++) {\n\t\t\ta.push(a[0].slice(i*4, (i+1)*4))\n\t\t}\t\n\t\ta.shift()\n\t}\n\tconsole.log(a)\n\tfor (let i=0; a[i*5]; i++) {\n\t\tst.push(a.slice(i*5, (i+1)*5).map( (a,k) => [...(a.slice(0, 1+(2*k%3) % 4)), 'üçÄ', ...(a.slice(1+(2*k%3) % 4) )]) )\n\t}\n\n\treturn st\n}\n\nexport { useUnsplash, luxNumsSplit }","import React, { useState } from 'react'\nimport './App.scss'\nimport { printNumbersTill, getGreetingTo, printValues } from './basic'\nimport { useUnsplash, luxNumsSplit } from './hooks'\n\n\nfunction Image ({ data, size }) {\n\treturn <>\n\t\t{data && data.urls &&\n\t\t\t<img src={data.urls[size || \"thumb\"]} alt={data.alt_description} />\n\t\t}\n\t</>\n}\nconst idsOfCaruselImages =[\n\t'a5lFTUmohGw', 'Y8QpNeHFGno', 'm7YpOZhtkBg', 'KMGQ36bIL50'\n]\n\nfunction Carusel ({data}) {\n\tconst [current, setCurrent] = useState(0)\n\treturn <>\n\t\t<nav><ul>\n\t\t\t{ data.map( (d,k) =>\n\t\t\t\t<li\n\t\t\t\t key={d.id}\n\t\t\t\t onClick={ current === k ? null : () => setCurrent(k) }\n\t\t\t\t className={ current === k ? \"active\" : \"null\"}\n\t\t\t\t>\n\t\t\t\t\t<Image data={d} />\n\t\t\t\t</li>\n\t\t\t) }\n\t\t</ul></nav>\n\t\t\n\t\t<Image data={data[current]} size=\"regular\"/>\n\t</>\n}\n\nfunction Luxor ({ luxNums, setLuxNums }) {\n\tconst [pasted, setPasted] = React.useState(false);\n\tconst [selected, setSelected ] = React.useState({ 26: 1 })\n\treturn <>\n\t\t{ luxNums.length ?\n\t\tluxNums.map( (sec,k) => <section key={k} >\n\t\t\t{sec.map( (col,k) => <div key={k} className=\"panel\" style={{float: 'left'}}>\n\t\t\t{col[0] ? <ul>{ \n\t\t\t\tcol.map( (n,l) =>\n\t\t\t\t<li key={l}\n\t\t\t\t\tclassName={ [ selected[n] ? \"sel\" : null, (typeof n === 'number')  ].join(\" \") }\n\t\t\t\t\tonClick={ () => (typeof n === 'number') && setSelected(prev => ({ ...prev, [n]: selected[n]?0:1 }))  }>{n}</li>\n\t\t\t\t)}</ul> : null\n\t\t\t}\n\t\t\t</div>)\n\t\t\t}\n\t\t</section>)\n\t\t\n\t\t\n\t\t:\n\t\t<textarea\n\t\t\tname=\"luxnums\"\n\t\t\tcols=\"30\" rows=\"10\"\n\t\t\tplaceholder=\"Paste the numbers here\"\n\t\t\tonPaste={ () => setPasted(true) }\n\t\t\tonChange={ (e) => pasted && setLuxNums(luxNumsSplit(e.target.value))\n\t\t\t}>\t\n\t\t</textarea>\n  \t}\n\t\t{ luxNums.length ? <>\n\t\t<button onClick={() => setLuxNums([])} style={{flexBasis: \"100%\"}}>Reset Numbers</button>\n\t\t<button onClick={() => setSelected([])} style={{flexBasis: \"100%\"}}>Reset Circles</button>\n\t\t</>\n\t\t: null }\n\t</>\n\n}\n\nfunction App () {\n\tconst a = 3\n\tconst b = 4\n\tconst [activeTab, setActiveTab] = useState(1)\n\tconst data = [] // useUnsplash({ ids: idsOfCaruselImages })\n\tconst [ luxNums, setLuxNums ] = useState(\n\t\tluxNumsSplit(`\n    9\n    2\n    8\n    1\n\n    26\n    27\n    17\n    18\n\n    41\n    37\n    38\n    36\n\n    56\n    49\n    52\n    48\n\n    62\n    71\n    63\n    75\n\n    9\n    14\n    8\n    10\n\n    20\n    25\n    30\n    21\n\n    31\n    37\n    41\n    40\n\n    52\n    53\n    49\n    48\n\n    75\n    74\n    71\n    63\n`\n\t))\n\n\tconsole.log(luxNums)\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>StayAtHome exercises</h1>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li onClick={ () => setActiveTab(1) }>Basic</li>\n\t\t\t\t\t\t<li onClick={ () => setActiveTab(2) }>Carusel</li>\n\t\t\t\t\t\t<li onClick={ () => setActiveTab(3) }>Luxor</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\t\t\t</header>\n\t\t\t{ activeTab === 1 &&\n\t\t\t<main id=\"Tab1\">\n\t\t\t\t<section>\n\t\t\t\t\t<h2>Add two numbers</h2>\n\t\t\t\t\tHallo and welcome. Hamy to inform you that {a} + {b} is equal to {a + b}\n\t\t\t\t</section><section>\n\t\t\t\t\t<h2>Loop 1-20</h2>\n\t\t\t\t\t{printNumbersTill(20)}\n\t\t\t\t</section><section>\n\t\t\t\t\t<h2>Loop 1-15</h2>\n\t\t\t\t\t{printNumbersTill(15)}\n\t\t\t\t</section><section>\n\t\t\t\t\t<h2>Greeting</h2>\n\t\t\t\t\t<p>{getGreetingTo('Mark')}</p>\n\t\t\t\t</section><section>\n\t\t\t\t\t<h2>Exercise 1</h2>\n\t\t\t\t\t{printValues([0, 3, 6, 7, 9])}\n\t\t\t\t</section><section>\n\t\t\t\t\t<h2>Exercise 2</h2>\n\t\t\t\t\t{printValues([10, 20, 30, 50, 12])}\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t\t}\n\t\t\t{ activeTab === 2 &&\n\t\t\t\t\t<main id='Tab2'>\n\t\t\t\t\t\t<Carusel data={ data }/>\n\t\t\t\t\t</main>\n\t\t\t}\n\t\t\t{ activeTab === 3 &&\n\t\t\t\t\t<main id='Tab3'>\n\t\t\t\t\t\t<Luxor { ...({ luxNums, setLuxNums }) } />\n\t\t\t\t\t</main>\n\t\t\t}\n\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}